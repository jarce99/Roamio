{%- comment -%}
  Optimized Image Snippet
  - Implements lazy loading
  - Uses srcset for responsive images
  - Adds proper alt text for SEO
  - Includes loading priority
  - Prevents layout shifts
{%- endcomment -%}

{%- liquid
  assign img_url_base = image | img_url: '1x1' | replace: '_1x1.', '_{width}x.'
  assign img_alt = alt | default: image.alt | default: title | default: 'Product image'
  assign lazy_load = lazy | default: true
  if lazy_load
    assign loading_attr = 'lazy'
  else
    assign loading_attr = 'eager'
  endif
  assign sizes_attr = sizes | default: '(min-width: 1200px) 1200px, 100vw'
-%}

<div class="image-wrapper" style="position: relative; padding-bottom: {{ 100 | divided_by: image.aspect_ratio }}%;">
  <img
    class="{{ class_name }} absolute inset-0 w-full h-full object-cover"
    src="{{ image | img_url: '300x' }}"
    srcset="
      {%- for width in '300,600,900,1200,1500,1800,2000' | split: ',' -%}
        {{ image | img_url: width | append: 'x' }} {{ width }}w
        {%- unless forloop.last -%}, {% endunless -%}
      {%- endfor -%}
    "
    sizes="{{ sizes_attr }}"
    loading="{{ loading_attr }}"
    width="{{ image.width }}"
    height="{{ image.height }}"
    alt="{{ img_alt | escape }}"
    {% if lazy_load %}data-lazy="true"{% endif %}
  >
</div>

<noscript>
  <img
    src="{{ image | img_url: '800x' }}"
    alt="{{ image.alt | escape }}"
    width="{{ image.width }}"
    height="{{ image.height }}"
    class="{% if additional_classes %}{{ additional_classes }}{% endif %}">
</noscript>

{%- comment -%}Lazy Loading JavaScript{%- endcomment -%}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    var lazyImages = [].slice.call(document.querySelectorAll('.lazy-image'));

    if ('IntersectionObserver' in window) {
      let lazyImageObserver = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(entry) {
          if (entry.isIntersecting) {
            let lazyImage = entry.target;
            let sources = lazyImage.parentElement.getElementsByTagName('source');

            // Load sources
            Array.from(sources).forEach(source => {
              if (source.dataset.srcset) {
                source.srcset = source.dataset.srcset;
              }
              if (source.dataset.sizes) {
                source.sizes = source.dataset.sizes;
              }
            });

            // Load image
            if (lazyImage.dataset.src) {
              lazyImage.src = lazyImage.dataset.src;
            }

            lazyImage.classList.remove('lazy-image');
            lazyImageObserver.unobserve(lazyImage);
          }
        });
      });

      lazyImages.forEach(function(lazyImage) {
        lazyImageObserver.observe(lazyImage);
      });
    }
  });
</script>

<style>
  .lazy-image-wrapper {
    display: block;
    position: relative;
    overflow: hidden;
  }

  .lazy-image {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .lazy-image:not([src]) {
    visibility: hidden;
  }

  .lazy-image[src] {
    opacity: 1;
    visibility: visible;
  }
</style> 